{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","searchTerm","setSearchTerm","items","books","setBooks","fetchBooks","a","axios","get","result","data","className","onSubmit","e","preventDefault","class","for","id","type","placeholder","value","onChange","target","map","book","index","key","width","height","alt","volumeInfo","title","src","authors","length","join","lastAuthor","slice","pop","bookAuthors","publishedDate","pageCount","averageRating","language","rootElement","document","getElementById","ReactDOM","render","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f8a7d209.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport axios from \"axios\";\nimport './App.css';\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [books, setBooks] = useState({ items: [] });\n  const onInputChange = e => {\n    setSearchTerm(e.target.value);\n  };\n\n  let API_URL = `https://www.googleapis.com/books/v1/volumes`;\n\n  const fetchBooks = async () => {\n    const result = await axios.get(`${API_URL}?q=${searchTerm}`);\n    setBooks(result.data);\n  };\n\n  const onSubmitHandler = e => {\n    e.preventDefault();\n    fetchBooks();\n  };\n\n  const bookAuthors = authors => {\n    if (authors.length <= 2) {\n      authors = authors.join(\" and \");\n    } else if (authors.length > 2) {\n      let lastAuthor = \" and \" + authors.slice(-1);\n      authors.pop();\n      authors = authors.join(\", \");\n      authors += lastAuthor;\n    }\n    return authors;\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <form onSubmit={onSubmitHandler}>\n      <div class=\"form-group\">\n      <label for=\"bookInput\">Enter Book Name</label>\n          <input className=\"form-control\" id=\"bookInput\"\n            type=\"search\"\n            placeholder=\"microservice, restful design, etc.,\"\n            value={searchTerm}\n            onChange={onInputChange}\n          />\n          </div>\n          <button type=\"submit\"  className=\"btn btn-primary\">Search</button>\n      </form>\n      <ul className=\"list-group list-group-flush mt-5 mb-5\">\n        {books.items.map((book, index) => {\n          return (\n            <li key={index} className=\"list-group-item d-flex bg-light\">\n                <img\n                  width=\"130\"\n                  height=\"200\"\n                  alt={`${book.volumeInfo.title} book`}\n                  src={`http://books.google.com/books/content?id=${\n                    book.id\n                  }&printsec=frontcover&img=1&zoom=1&source=gbs_api`}\n                />\n                <span className=\"ml-3\">\n                  <div className=\"font-weight-bold\">{book.volumeInfo.title}</div>\n                  <div className=\"mt-3\">Author : {bookAuthors(book.volumeInfo.authors)}</div>\n                  <div>Published Date : {book.volumeInfo.publishedDate}</div>\n                  <div>Total Pages : {book.volumeInfo.pageCount}</div>\n                  <div>Rating : {book.volumeInfo.averageRating}/5</div>\n                  <div>Language : {book.volumeInfo.language}</div>\n                </span>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}